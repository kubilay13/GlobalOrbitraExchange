@model List<GlobalOrbitra.Models.DTO.UserDto.TransactionViewModel>
<link href="~/css/transaction.css" rel="stylesheet" />

<body>
    <div class="container">
        <!-- Tablo üstü filtreler -->
        <div class="page-header">
            <div class="controls">
                <input id="search" type="text" placeholder="Ara: txid, varlık, adres..." />
                <select id="typeFilter">
                    <option value="all">Tümü</option>
                    <option value="deposit">Deposit</option>
                    <option value="withdrawal">Withdrawal</option>
                </select>
                <label class="muted">Baş:</label>
                <input id="fromDate" type="date" />
                <label class="muted">Son:</label>
                <input id="toDate" type="date" />
                <button id="exportBtn">CSV İndir</button>
            </div>
        </div>

        <!-- TABLO -->
        <div class="card">
            <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:10px">
                <div class="muted">Toplam: <strong id="totalCount">0</strong> işlem</div>
                <div class="muted">Sayfa: <span id="pageInfo">1 / 1</span></div>
            </div>

            <div class="table-wrap">
                <table id="txTable">
                    <thead>
                        <tr>
                            <th data-key="date">Tarih ▼</th>
                            <th data-key="type">Tür</th>
                            <th data-key="asset">Varlık</th>
                            <th data-key="amount">Miktar</th>
                            <th data-key="fee">Ücret</th>
                            <th data-key="status">Durum</th>
                            <th data-key="txid">TXID</th>
                            <th data-key="fromto">Adres</th> <!-- Değişti: Kimden/Kime -> Adres -->
                            <th>İşlem</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <div style="display:flex;justify-content:space-between;align-items:center;margin-top:12px">
                <div class="actions">
                    <button id="prevBtn">◀ Önceki</button>
                    <button id="nextBtn">Sonraki ▶</button>
                </div>
                <div class="muted">
                    Sayfa başına:
                    <select id="pageSize">
                        <option>10</option>
                        <option>25</option>
                        <option>50</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Gerçek veriyi kullan
        const mockData = @Html.Raw(Json.Serialize(Model));

        // === STATE ===
        let state = {
            data: mockData || [],
            filtered: [],
            sortKey: 'date',
            sortDir: -1,
            page: 1,
            pageSize: 10
        };

        function formatDate(iso){
            return new Date(iso).toLocaleString('tr-TR');
        }

        function formatAmount(amount) {
            return parseFloat(amount).toFixed(6);
        }

        function getExplorerUrl(network, txHash) {
            // Network'e göre explorer URL'leri
            const explorers = {
                'TRON': 'https://tronscan.org/#/transaction/',
                'ETH': 'https://etherscan.io/tx/',
                'BSC': 'https://bscscan.com/tx/'
            };
            return (explorers[network] || 'https://explorer.example.com/tx/') + txHash;
        }

        function render(){
            const tbody = document.querySelector('#txTable tbody');
            const {filtered, page, pageSize, sortKey, sortDir} = state;

            // Sıralama
            filtered.sort((a,b)=>{
                if(sortKey==='amount'||sortKey==='fee')
                    return (parseFloat(a[sortKey])-parseFloat(b[sortKey]))*sortDir;
                if(sortKey==='date')
                    return (new Date(a.date)-new Date(b.date))*sortDir;
                return String(a[sortKey]).localeCompare(String(b[sortKey]))*sortDir;
            });

            const total = filtered.length;
            const pages = Math.max(1,Math.ceil(total/pageSize));
            state.page = Math.min(page,pages);
            const start = (state.page-1)*pageSize;
            const pageItems = filtered.slice(start,start+pageSize);

            tbody.innerHTML = pageItems.map(item=>`
                <tr>
                    <td>${formatDate(item.date)}</td>
                    <td><span class="pill ${item.type}">${item.type}</span></td>
                    <td>${item.asset}</td>
                    <td>${formatAmount(item.amount)}</td>
                    <td class="muted">${formatAmount(item.fee)}</td>
                    <td class="status-${item.status.toLowerCase()}">${item.status}</td>
                    <td>
                        ${item.txHash ?
                            `<a href="#" data-txid="${item.txHash}" class="txlink">${item.txHash}</a>` :
                            '<span class="muted">-</span>'
                        }
                    </td>
                    <td class="muted">${item.fromTo}</td>
                    <td>
                        ${item.txHash ?
                            `<button data-copy="${item.txHash}">Kopyala</button>` :
                            '<button disabled>Kopyala</button>'
                        }
                    </td>
                </tr>
            `).join('');

            document.getElementById('totalCount').textContent = total;
            document.getElementById('pageInfo').textContent = `${state.page} / ${pages}`;

            // Event listeners
            document.querySelectorAll('[data-copy]').forEach(btn=>{
                btn.addEventListener('click',e=>{
                    const tx = e.currentTarget.dataset.copy;
                    navigator.clipboard?.writeText(tx).then(()=>{
                        e.currentTarget.textContent='Kopyalandı';
                        setTimeout(()=> e.currentTarget.textContent='Kopyala',900);
                    });
                });
            });

            document.querySelectorAll('.txlink').forEach(a=>{
                a.addEventListener('click',e=>{
                    e.preventDefault();
                    const txid = e.currentTarget.dataset.txid;
                    // Network bilgisi yoksa TRON varsayalım
                    window.open(getExplorerUrl('TRON', txid),'_blank');
                });
            });
        }

        function applyFilters(){
            const q = document.getElementById('search').value.trim().toLowerCase();
            const type = document.getElementById('typeFilter').value;
            const from = document.getElementById('fromDate').value;
            const to = document.getElementById('toDate').value;

            state.filtered = state.data.filter(r=>{
                if(type!=='all' && r.type!==type) return false;
                if(from && new Date(r.date)<new Date(from)) return false;
                if(to && new Date(r.date)>new Date(to+'T23:59:59')) return false;
                if(!q) return true;

                return [
                    r.txHash,
                    r.asset,
                    r.fromTo,
                    r.type,
                    r.status,
                    r.walletAddress,
                    r.senderAddress
                ].join(' ').toLowerCase().includes(q);
            });
            state.page=1;
            render();
        }

        function exportCSV(){
            const rows = state.filtered.map(r=>[
                r.date, r.type, r.asset, r.amount, r.fee, r.status, r.txHash, r.fromTo
            ]);
            const header = ['Tarih','Tür','Varlık','Miktar','Ücret','Durum','TX Hash','Adres'];
            const csv = [header.join(','), ...rows.map(r=>r.map(c=>`"${String(c).replace(/"/g,'""')}"`).join(','))].join('\n');
            const blob = new Blob([csv],{type:'text/csv;charset=utf-8;'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href=url;
            a.download='transaction_history.csv';
            a.click();
            URL.revokeObjectURL(url);
        }

        function throttle(fn,wait){
            let t=0;
            return function(...a){
                const now=Date.now();
                if(now-t>wait){
                    t=now;
                    fn.apply(this,a);
                }
            }
        }

        function init(){
            document.getElementById('pageSize').value=state.pageSize;
            document.getElementById('search').addEventListener('input',throttle(applyFilters,250));
            document.getElementById('typeFilter').addEventListener('change',applyFilters);
            document.getElementById('fromDate').addEventListener('change',applyFilters);
            document.getElementById('toDate').addEventListener('change',applyFilters);
            document.getElementById('exportBtn').addEventListener('click',exportCSV);
            document.getElementById('prevBtn').addEventListener('click',()=>{
                state.page=Math.max(1,state.page-1);
                render();
            });
            document.getElementById('nextBtn').addEventListener('click',()=>{
                state.page++;
                render();
            });
            document.getElementById('pageSize').addEventListener('change',e=>{
                state.pageSize=parseInt(e.target.value);
                state.page=1;
                render();
            });

            document.querySelectorAll('th[data-key]').forEach(th=>{
                th.addEventListener('click',()=>{
                    const key=th.dataset.key;
                    if(state.sortKey===key)
                        state.sortDir=-state.sortDir;
                    else {
                        state.sortKey=key;
                        state.sortDir=-1;
                    }
                    document.querySelectorAll('th[data-key]').forEach(h=>{
                        h.textContent = h.dataset.key +
                            (h.dataset.key===state.sortKey ?
                                (state.sortDir===-1 ? ' ▼' : ' ▲') : '');
                    });
                    render();
                });
            });

            applyFilters();
        }

        // Sayfa yüklendiğinde init çağır
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>