// <auto-generated />
using System;
using GlobalOrbitra.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlobalOrbitra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251029010725_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GlobalOrbitra.Models.MailModel.OtpCodeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Consumed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OtpCodes");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.ChainModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChainType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RpcUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChainModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChainType = "EVM",
                            IsActive = true,
                            Name = "Ethereum",
                            RpcUrl = "https://mainnet.infura.io/v3/YOUR_PROJECT_ID",
                            Symbol = "ETH"
                        },
                        new
                        {
                            Id = 2,
                            ChainType = "TRON",
                            IsActive = true,
                            Name = "Tron",
                            RpcUrl = "https://api.trongrid.io",
                            Symbol = "TRX"
                        },
                        new
                        {
                            Id = 3,
                            ChainType = "EVM",
                            IsActive = true,
                            Name = "Binance Smart Chain",
                            RpcUrl = "https://bsc-dataseed.binance.org",
                            Symbol = "BSC"
                        },
                        new
                        {
                            Id = 4,
                            ChainType = "Solana",
                            IsActive = true,
                            Name = "Solana",
                            RpcUrl = "https://api.mainnet-beta.solana.com",
                            Symbol = "SOL"
                        },
                        new
                        {
                            Id = 5,
                            ChainType = "EVM",
                            IsActive = true,
                            Name = "BitTorrent Chain",
                            RpcUrl = "https://api.mainnet-beta.com",
                            Symbol = "BTTC"
                        },
                        new
                        {
                            Id = 6,
                            ChainType = "TRON",
                            IsActive = true,
                            Name = "Tron Nile Testnet",
                            RpcUrl = "https://nile.trongrid.io",
                            Symbol = "TRX"
                        },
                        new
                        {
                            Id = 7,
                            ChainType = "EVM",
                            IsActive = true,
                            Name = "Ethereum Sepolia Testnet",
                            RpcUrl = "https://sepolia.infura.io/v3/YOUR_PROJECT_ID",
                            Symbol = "ETH"
                        },
                        new
                        {
                            Id = 8,
                            ChainType = "EVM",
                            IsActive = true,
                            Name = "BitTorrent Chain Testnet",
                            RpcUrl = "https://api.testnet.bittorrentchain.io",
                            Symbol = "BTTC"
                        },
                        new
                        {
                            Id = 9,
                            ChainType = "EVM",
                            IsActive = true,
                            Name = "Binance Smart Chain Testnet",
                            RpcUrl = "https://api.testnet.bittorrentchain.io",
                            Symbol = "BSC"
                        });
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.TokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChainId")
                        .HasColumnType("int");

                    b.Property<string>("ContractAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Decimal")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsToken")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChainId");

                    b.ToTable("TokenModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChainId = 1,
                            ContractAddress = "ETH_NATIVE",
                            Decimal = 18m,
                            IsActive = true,
                            IsToken = false,
                            LogoUrl = "https://cryptologos.cc/logos/ethereum-eth-logo.png",
                            Name = "ETH",
                            Symbol = "ETH"
                        },
                        new
                        {
                            Id = 2,
                            ChainId = 2,
                            ContractAddress = "TRX_NATIVE",
                            Decimal = 6m,
                            IsActive = true,
                            IsToken = false,
                            LogoUrl = "https://cryptologos.cc/logos/tron-trx-logo.png",
                            Name = "TRX",
                            Symbol = "TRX"
                        },
                        new
                        {
                            Id = 3,
                            ChainId = 3,
                            ContractAddress = "BSC_NATIVE",
                            Decimal = 18m,
                            IsActive = true,
                            IsToken = false,
                            LogoUrl = "https://cryptologos.cc/logos/binance-smart-chain-bsc-logo.png",
                            Name = "BSC",
                            Symbol = "BSC"
                        },
                        new
                        {
                            Id = 4,
                            ChainId = 4,
                            ContractAddress = "SOL_NATIVE",
                            Decimal = 9m,
                            IsActive = true,
                            IsToken = false,
                            LogoUrl = "https://cryptologos.cc/logos/solana-sol-logo.svg",
                            Name = "SOL",
                            Symbol = "SOL"
                        },
                        new
                        {
                            Id = 5,
                            ChainId = 5,
                            ContractAddress = "BTT_NATIVE",
                            Decimal = 18m,
                            IsActive = true,
                            IsToken = true,
                            LogoUrl = "https://cryptologos.cc/logos/bittorrent-btt-logo.png",
                            Name = "BTT",
                            Symbol = "BTT"
                        },
                        new
                        {
                            Id = 6,
                            ChainId = 5,
                            ContractAddress = "TRX_NATIVE",
                            Decimal = 6m,
                            IsActive = true,
                            IsToken = false,
                            LogoUrl = "https://cryptologos.cc/logos/tron-trx-logo.png",
                            Name = "TRX (Testnet)",
                            Symbol = "TRX"
                        },
                        new
                        {
                            Id = 7,
                            ChainId = 5,
                            ContractAddress = "TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf",
                            Decimal = 6m,
                            IsActive = true,
                            IsToken = true,
                            LogoUrl = "https://cryptologos.cc/logos/tether-usdt-logo.png",
                            Name = "Tether USDT (Nile)",
                            Symbol = "USDT"
                        },
                        new
                        {
                            Id = 8,
                            ChainId = 5,
                            ContractAddress = "TEMVynQpntMqkPxP6wXTW2K7e4sM3cRmWz",
                            Decimal = 6m,
                            IsActive = true,
                            IsToken = true,
                            LogoUrl = "https://cryptologos.cc/logos/usd-coin-usdc-logo.png",
                            Name = "USD Coin (Nile)",
                            Symbol = "USDC"
                        },
                        new
                        {
                            Id = 9,
                            ChainId = 5,
                            ContractAddress = "TVSvjZdyDSNocHm7dP3jvCmMNsCnMTPa5W",
                            Decimal = 18m,
                            IsActive = true,
                            IsToken = true,
                            LogoUrl = "https://cryptologos.cc/logos/bittorrent-btt-logo.png",
                            Name = "BTT (Nile)",
                            Symbol = "BTT"
                        },
                        new
                        {
                            Id = 10,
                            ChainId = 5,
                            ContractAddress = "TFT7sNiNDGZcqL7z7dwXUPpxrx1Ewk8iGL",
                            Decimal = 18m,
                            IsActive = true,
                            IsToken = true,
                            LogoUrl = "https://logo.svgcdn.com/token-branded/usdd.png",
                            Name = "USDD Token (Nile)",
                            Symbol = "USDD"
                        },
                        new
                        {
                            Id = 11,
                            ChainId = 6,
                            ContractAddress = "0x0000000000000000000000000000000000000000",
                            Decimal = 18m,
                            IsActive = true,
                            IsToken = false,
                            LogoUrl = "https://cryptologos.cc/logos/ethereum-eth-logo.png",
                            Name = "ETH (Sepolia)",
                            Symbol = "ETH"
                        },
                        new
                        {
                            Id = 12,
                            ChainId = 6,
                            ContractAddress = "0xaA8E23Fb1079EA71e0a56F48a2aA51851D8433D0",
                            Decimal = 6m,
                            IsActive = true,
                            IsToken = true,
                            LogoUrl = "https://cryptologos.cc/logos/tether-usdt-logo.png",
                            Name = "USDT (Sepolia)",
                            Symbol = "USDT"
                        },
                        new
                        {
                            Id = 13,
                            ChainId = 6,
                            ContractAddress = "0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238",
                            Decimal = 6m,
                            IsActive = true,
                            IsToken = true,
                            LogoUrl = "https://cryptologos.cc/logos/usd-coin-usdc-logo.png",
                            Name = "USDC (Sepolia)",
                            Symbol = "USDC"
                        },
                        new
                        {
                            Id = 14,
                            ChainId = 8,
                            ContractAddress = "BTT_NATIVE",
                            Decimal = 6m,
                            IsActive = true,
                            IsToken = true,
                            LogoUrl = "https://cryptologos.cc/logos/bittorrent-btt-logo.png",
                            Name = "BTT Testnet",
                            Symbol = "BTT"
                        },
                        new
                        {
                            Id = 15,
                            ChainId = 9,
                            ContractAddress = "BSC_NATIVE",
                            Decimal = 18m,
                            IsActive = true,
                            IsToken = false,
                            LogoUrl = "https://cryptologos.cc/logos/binance-smart-chain-bsc-logo.png",
                            Name = "BSC Testnet",
                            Symbol = "BSC"
                        });
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.TransactionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)");

                    b.Property<decimal>("Commission")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TokenId")
                        .HasColumnType("int");

                    b.Property<string>("TxHash")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.HasIndex("TxHash")
                        .IsUnique()
                        .HasFilter("[TxHash] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionModel");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserModels");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.UserWalletModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWalletModels");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.TokenModel", b =>
                {
                    b.HasOne("GlobalOrbitra.Models.UserModel.ChainModel", "Chain")
                        .WithMany("TokenModels")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.TransactionModel", b =>
                {
                    b.HasOne("GlobalOrbitra.Models.UserModel.TokenModel", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId");

                    b.HasOne("GlobalOrbitra.Models.UserModel.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.UserWalletModel", b =>
                {
                    b.HasOne("GlobalOrbitra.Models.UserModel.TokenModel", "Token")
                        .WithMany("UserWallets")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalOrbitra.Models.UserModel.UserModel", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.ChainModel", b =>
                {
                    b.Navigation("TokenModels");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.TokenModel", b =>
                {
                    b.Navigation("UserWallets");
                });

            modelBuilder.Entity("GlobalOrbitra.Models.UserModel.UserModel", b =>
                {
                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
